# -*- coding: utf-8 -*-
"""Ss_Buku.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zu15ptG8Dyg_gt-UllVejrDVpnJkhNqI
"""

!pip install streamlit
import streamlit as st
import pandas as pd
import numpy as np
import tensorflow as tf
import pickle

# Fungsi untuk memuat model Collaborative Filtering
# Pastikan Anda sudah menyimpan model Anda dalam format yang dapat dimuat (misalnya, SavedModel atau HDF5)
# Ganti 'path/to/your/collaborative_filtering_model' dengan path yang benar
@st.cache_resource
def load_collaborative_filtering_model():
    try:
        # Pastikan path modelnya benar
        model = tf.keras.models.load_model('path/to/your/collaborative_filtering_model')
        return model
    except Exception as e:
        st.error(f"Error loading Collaborative Filtering model: {e}")
        return None

# Fungsi untuk memuat data yang diperlukan (misalnya, data buku, encoding)
# Pastikan Anda sudah menyimpan data yang diperlukan dalam format yang dapat dimuat (misalnya, CSV, Pickle)
# Ganti path sesuai dengan lokasi file Anda
@st.cache_data
def load_data():
    try:
        # Load data buku
        # Ganti 'path/to/your/Books.csv' dengan path yang benar ke file Books.csv Anda
        books_df = pd.read_csv('path/to/your/Books.csv')

        # Load data encoding (jika disimpan)
        # Misalnya, jika Anda menyimpan user_encoding dan isbn_encoding menggunakan pickle
        # Ganti path sesuai dengan lokasi file pickle Anda
        # try:
        #     with open('path/to/your/user_encoding.pkl', 'rb') as f:
        #         user_encoding = pickle.load(f)
        #     with open('path/to/your/isbn_encoding.pkl', 'rb') as f:
        #         isbn_encoding = pickle.load(f)
        #     # return books_df, user_encoding, isbn_encoding # Jika Anda mengembalikan lebih dari satu variabel
        # except FileNotFoundError:
        #     st.warning("Encoding files not found. Collaborative Filtering recommendations may not work.")
        #     # Handle case where encoding files are missing, perhaps return only books_df
        #     # return books_df, None, None # Jika Anda mengembalikan lebih dari satu variabel

        return books_df # Sesuaikan return value sesuai data yang Anda muat

    except FileNotFoundError:
        st.error(f"Error: Data file not found at 'path/to/your/Books.csv'. Please check the path.")
        return None # Mengembalikan None jika file tidak ditemukan
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return None # Mengembalikan None untuk jenis error lainnya


# Memuat model dan data
collaborative_filtering_model = load_collaborative_filtering_model()
# books_df, user_encoding, isbn_encoding = load_data() # Gunakan ini jika load_data mengembalikan tuple
books_df = load_data() # Sesuaikan pemanggilan load_data() tergantung apa yang dikembalikan oleh load_data()

# Judul aplikasi Streamlit
st.title('Book Recommendation App')

# Bagian untuk Content-Based Filtering (jika ingin disertakan)
st.header('Content-Based Filtering')

# Pastikan books_df adalah DataFrame sebelum mencoba mengakses kolomnya
if books_df is not None and isinstance(books_df, pd.DataFrame):
    # Contoh: Pilihan dropdown untuk memilih buku
    book_titles = books_df['Book-Title'].unique().tolist()
    selected_book_title = st.selectbox('Select a book:', book_titles)

    # Tombol untuk mendapatkan rekomendasi Content-Based
    if st.button('Get Content-Based Recommendations'):
        # Implementasi fungsi book_recommendation dari notebook Anda di sini
        # Pastikan Anda memiliki matriks cosine similarity yang sudah dihitung
        # atau cara untuk menghitungnya saat runtime (hati-hati dengan performa untuk dataset besar)

        # Contoh sederhana (Anda perlu menggantinya dengan logika rekomendasi Anda)
        st.subheader(f'Recommendations based on "{selected_book_title}":')
        # Tampilkan hasil rekomendasi

        st.write("Content-Based Filtering logic goes here.")
        # Misalnya:
        # recommendations = book_recommendation(selected_book_title, similarity_data, books_df)
        # st.dataframe(recommendations)

else:
    # Tambahkan pesan yang lebih informatif jika data tidak dimuat
    st.warning("Could not load book data for Content-Based Filtering. Please check the data file path.")


# Bagian untuk Collaborative Filtering
st.header('Collaborative Filtering')

# Sesuaikan kondisi data yang diperlukan, pastikan semua variabel yang dibutuhkan ada dan bertipe yang benar
if collaborative_filtering_model is not None and books_df is not None and isinstance(books_df, pd.DataFrame): # Tambahkan check isinstance
    # Contoh: Input user ID
    user_id_input = st.text_input('Enter User ID:')

    # Tombol untuk mendapatkan rekomendasi Collaborative Filtering
    if st.button('Get Collaborative Filtering Recommendations'):
        # Implementasi logika rekomendasi Collaborative Filtering dari notebook Anda di sini

        # Pastikan Anda memiliki mapping user_encoding dan isbn_encoding
        # dan data df_ratings yang digunakan untuk training model

        # Contoh sederhana (Anda perlu menggantinya dengan logika rekomendasi Anda)
        if user_id_input:
            try:
                # Contoh: Menggunakan user_id_input untuk mendapatkan rekomendasi
                st.subheader(f'Recommendations for User ID: {user_id_input}')
                st.write("Collaborative Filtering logic goes here.")
                # Misalnya:
                # Lakukan encoding user_id_input
                # Buat user_book_array
                # Lakukan prediksi menggunakan collaborative_filtering_model
                # Decode hasil prediksi kembali ke ISBN dan judul buku
                # Tampilkan hasil rekomendasi

            except Exception as e:
                st.error(f"Error getting recommendations: {e}")
        else:
            st.warning("Please enter a User ID.")

else:
    # Tambahkan pesan yang lebih informatif
    st.warning("Could not load Collaborative Filtering model or necessary data. Please check model and data file paths.")


# Opsional: Bagian lain atau visualisasi
# st.header('Data Visualization (Optional)')
# Tambahkan kode untuk menampilkan visualisasi jika diinginkan